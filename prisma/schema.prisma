generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String       @id @default(uuid())
  name         String
  username     String?      @unique
  passwordHash String?      @map("password_hash")
  email        String       @unique
  avatarUrl    String?      @map("avatar_url")
  createdAt    DateTime     @default(now()) @map("created_at")
  updatedAt    DateTime     @updatedAt @map("updated_at")
  tokens       Token[]
  accounts     Account[]
  booksRatings BookRating[]

  @@map("users")
}

model Book {
  id              String         @id @default(uuid())
  name            String
  coverUrl        String         @map("cover_url")
  description     String
  slug            String         @unique
  totalPages      Int            @map("total_pages")
  createdAt       DateTime       @default(now()) @map("created_at")
  updatedAt       DateTime       @updatedAt @map("updated_at")
  booksRatings    BookRating[]
  bookscategories BookCategory[]

  author   Author @relation(fields: [authorId], references: [id])
  authorId String

  @@map("books")
}

model BookRating {
  id        String   @id @default(uuid())
  rating    Int
  comment   String
  createdAt DateTime @default(now()) @map("created_at")

  updatedAt DateTime @updatedAt @map("updated_at")

  userId String
  user   User   @relation(fields: [userId], references: [id])
  book   Book   @relation(fields: [bookId], references: [id])
  bookId String

  @@map("book_ratings")
}

model Category {
  id              String         @id @default(uuid())
  name            String
  createdAt       DateTime       @default(now()) @map("created_at")
  updatedAt       DateTime       @updatedAt @map("updated_at")
  bookscategories BookCategory[]

  @@map("categories")
}

model BookCategory {
  id         String   @id @default(uuid())
  category   Category @relation(fields: [categoryId], references: [id])
  categoryId String
  book       Book     @relation(fields: [bookId], references: [id])
  bookId     String
}

model Author {
  id        String   @id @default(uuid())
  name      String
  biography String?
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  Book      Book[]

  @@map("authors")
}

enum AccountProvider {
  GOOGLE
  FACEBOOK
}

enum TokenType {
  PASSWORD_RECOVER
}

model Token {
  id        String    @id @default(uuid())
  type      TokenType
  createdAt DateTime  @default(now()) @map("created_at")

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @map("user_id")

  @@map("tokens")
}

model Account {
  id                String          @id @default(uuid())
  provider          AccountProvider
  providerAccountId String          @unique @map("provider_account_id")
  user              User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId            String          @map("user_id")

  @@unique([provider, userId])
  @@map("accounts")
}
